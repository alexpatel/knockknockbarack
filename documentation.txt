'Knock Knock, Barack': Documentation
Alexander Patel

=== Setup ===

Dependencies: see requirements.txt. 

Configuration: After installing dependencies, run setup.py. This will configure both of the necessary database collections, as well as start the application on 127.0.0.1:5000

=== app.py ===

'Knock Knock, Barack' runs on the Flask microframework (http://flask.pocoo.org/). app.py holds the our WSGI application and handles URL routing. 

> @app.route('/')
> def main():

When the user accesses knockknockbarack.com/, render the index.html argument, passing to it a generated joke. 


> @app.route('/_get_joke')
> def get_joke():

When a new joke is requested via the 'Generate New Joke' button on the home page, the application asynchronously gets a new joke and inserts it onto the page. To do this, I used javascript to load a new joke as a string through the '/_get_joke' url. 

> if __name__ == '__main__': ...

Runs the application. The Flask development server runs on 127.0.0.1:5000 by default. We route it to 0.0.0.0:80 for deployment. 

=== build.py ===

> build()

Iterates through the speeches in /speeches/ and inserts them as Markov objects into our mongodb 'words' collection. 

> clean(word)

Removes certain punctuation from a word. '.' and ',' are left as to add some natural punctuation into jokes when they are generated. 

> sent_end(word)

Checks if the word is at the end of a sentence in a speech. 

> insert(text, collection)

Inserts each word in text into collection as a Markov object. Each Markov object holds:
	-- the word itself
	-- the word that comes right after in the speech
	-- the word that comes two after in the speech
	-- the word's part of speech
	-- whether the word begins/ends a sentence in the speech

> add_jokes(num)

Generates num jokes and inserts them into the 'jokes' collection. 

=== conf.py ===

Uses the pymongo library to connect to mongodb. 

> def connect(coll):

Responds with a cursor to mongo collection named coll. 

=== markov.py ===

> generate(start_word=None)

Generates a phrase using order-1 and order-2 Markov models. To generate a phrase off of a certain word, the argument start_word can be used. I start on a random word / start_word, and then pick the next word to add to the phrase by picking a random word from the set of  Markov objects in the 'words' collection whose '1' and '2' field match the '2' and '3' field of the current word. If none exist, I expand the scope of my search: only the next word's '1' field must match the current word's '2' field. The phrase is ended when a word is reached that naturally ends a sentence in one of Obama's speeches, or when the phrase has drawn on for too long. 

> yo_mama(), knockknock(), chicken()

Generates yo mama, knock-knock, and 'why did the chicken cross the road?' jokes using parts-of-speeches. For example, for a 'yo mama' joke, we pick a random adjective to put in 'Yo mama is so ___'. Then, we generate a phrase using the generate() method with a start_word that is preceded naturally by '{adjective} that' in a speech. 

> joke()

I noticed that it takes a while to generate a joke from scratch upon every page request, so I decided to go after it asynchronously. I have a queue of 100 or so jokes stored in a mongo collection, and I serve the top-most joke to the user. This task is very fast, as it is a quick text retrieval from the database. I then start a new thread to asynchrously construct a new joke to add to the end of the collection of jokes, so that the queue stays the same length. However, this functionality doesn't seem to quite work. I think that when joke() returns, the new thread is terminated, and a new joke is never added into the database. I can't figure out a way to avoid waiting for a joke to be generated before returning a new joke to the user. 

> async()

Called asynchronously within joke(). Generates a random type of joke and inserts into into the 'jokes' mongo collection. 

> rand_joke()

Chooses a random type of joke and generates that joke. 

> /static/js/get_joke.js

Asynchrously gets a joke with a request to the /_get_joke url. Replaces the contents of the joke div with the new joke. 




